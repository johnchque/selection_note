<?php

/**
 * @file
 * Create notes for text selections.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Drupal\relation\Entity\Relation;

/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 */
function selection_note_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  if ($build) {
    // Get all the relations that contain the current node.
    $relations = \Drupal::entityTypeManager()
      ->getListBuilder('relation')
      ->getStorage()
      ->loadByProperties(['field_endpoints' => ['0' => $node->id()]]);
    // Loop over the relations and build links to related nodes.
    foreach ($relations as $key => $value) {
      $text = $value->get('field_relation_text')->value;
      $url = Url::fromRoute('entity.node.canonical', ['node' => $value->get('field_relation_text_target')->value]);
      $link = Link::fromTextAndUrl($key, $url);
      // @todo make this field configurable.
      $body = $build['field_description'][0]['#text'];
      $build['field_description'][0]['#text'] = str_replace($text, $text . ' (' . $link->toString() . ')', $body);
    };
    $build['#attached']['drupalSettings']['selection_note']['related_node_id'] = $node->id();
    $build['#attached']['library'][] = 'selection_note/drupal.selection_note.admin';
  }
  $renderer = \Drupal::service('renderer');
  $renderer->addCacheableDependency($build);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function selection_note_preprocess_node(&$variables) {
  if ($node_type = NodeType::load(\Drupal::config('selection_note.settings')
    ->get('content_type_node'))) {
    $note_selection_wrapper = [
      '#type' => 'container',
      '#attributes' => [
        'class' => [
          'note-selection-wrapper'
        ]
      ],
    ];

    $share_selection_message_wrapper = [
      '#type' => 'container',
      '#attributes' => [
        'id' => 'ss-dialog-wrapper',
      ],
    ];

    $note_selection_wrapper['add_note'] = [
      '#type' => 'link',
      '#title' => t('Add Note'),
      '#url' => Url::fromRoute('node.add', ['node_type' => $node_type->id()]),
      '#attributes' => [
        'class' => ['use-ajax', 'button', 'note-selection-button'],
        'id' => ['note-selection-button'],
        'data-dialog-type' => 'modal',
        'data-dialog-options' => Json::encode([
          'width' => 700,
        ]),
      ],
    ];

    $variables['content']['share_selection_message_wrapper'] = $share_selection_message_wrapper;
    $variables['content']['share'] = $note_selection_wrapper;
  };
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function selection_note_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node_type = \Drupal::config('selection_note.settings')
    ->get('content_type_node');
  if ($form_id == 'node_' . $node_type . '_form') {
    $form['related_node_id'] = [
      '#type' => 'hidden',
    ];
    $form['related_node_text'] = [
      '#type' => 'hidden',
    ];
    $form['actions']['submit']['#submit'][] = 'selection_note_save_relation';
  }
}

/**
 * Saves the relation between nodes.
 */
function selection_note_save_relation(&$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  // @todo use relation endpoints when https://www.drupal.org/node/2916092.
  /*$endpoints[] = [
    'target_type' => 'node',
    'target_id' => $values['related_node_id'],
  ];

  $endpoints[] = [
    'target_type' => 'node',
    'target_id' => $values['nid'],
  ];*/

  $node_source = Node::load($values['related_node_id']);
  $node_target = Node::load($values['nid']);

  $relation = Relation::create([
    'relation_type' => 'intersection',
    'field_endpoints' => [$node_source, $node_target],
    'field_relation_text' => $values['related_node_text'],
    'field_relation_text_source' => $values['related_node_id'],
    'field_relation_text_target' => $values['nid'],
  ]);
  //$relation->endpoints = $endpoints;
  $relation->save();
}
